---
const navItems = [
  { href: '/', label: 'Home' },
  { href: '/about', label: 'About' },
  { href: '/skills', label: 'Skills' },
  {href:'/certificates', label:'Certificates'},
  { href: '/projects', label: 'Projects' },
  { href: '/hobbies', label: 'Hobbies' },
  { href: '/contact', label: 'Contact' },
  
];

const currentPath = Astro.url.pathname;
---

<header class="fixed w-full bg-white/90 backdrop-blur-sm z-50 shadow-sm">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <div class="flex-shrink-0">
        <a href="/" class="text-2xl font-bold text-primary-600">BK</a>
      </div>
      
      <nav class="hidden lg:flex space-x-8">
        {navItems.map(item => {
          const isActive = currentPath === item.href || 
                          (item.href !== '/' && currentPath.startsWith(item.href));
          return (
            <a
              href={item.href}
              class:list={[
                'text-sm font-medium transition-colors',
                isActive 
                  ? 'text-primary-600'
                  : 'text-gray-700 hover:text-primary-600'
              ]}
            >
              {item.label}
            </a>
          )
        })}
      </nav>

      <button
        id="mobile-menu-button"
        class="lg:hidden p-2 rounded-md text-gray-600 hover:text-primary-600"
        aria-label="Toggle menu"
        aria-expanded="false"
      >
        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path class="menu-open" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
          <path class="menu-close hidden" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </button>
    </div>
  </div>

  <div id="mobile-menu" class="fixed inset-0 lg:hidden invisible opacity-0 transition-all duration-300">
    <div id="mobile-menu-overlay" class="absolute inset-0 bg-gray-900/20 backdrop-blur-sm opacity-0 transition-opacity duration-300"></div>
    
    <div id="mobile-menu-content" 
         class="absolute top-16 left-0 right-0 bg-white border-t border-gray-200 transform -translate-y-8 opacity-0 transition-all duration-300">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
        <nav class="flex flex-col space-y-2">
          {navItems.map(item => {
            const isActive = currentPath === item.href || 
                            (item.href !== '/' && currentPath.startsWith(item.href));
            return (
              <a
                href={item.href}
                class:list={[
                  'px-4 py-2 rounded-lg text-sm font-medium transition-colors',
                  isActive 
                    ? 'text-primary-600 bg-primary-50'
                    : 'text-gray-700 hover:text-primary-600 hover:bg-gray-50'
                ]}
              >
                {item.label}
              </a>
            )
          })}
        </nav>
      </div>
    </div>
  </div>
</header>

<script>
  function setupMobileMenu() {
    const button = document.getElementById('mobile-menu-button');
    const menu = document.getElementById('mobile-menu');
    const overlay = document.getElementById('mobile-menu-overlay');
    const menuContent = document.getElementById('mobile-menu-content');
    
    if (!button || !menu || !overlay || !menuContent) {
      console.error('Required mobile menu elements not found');
      return;
    }

    const menuOpenIcon = button.querySelector('.menu-open');
    const menuCloseIcon = button.querySelector('.menu-close');
    let isMenuOpen = false;

    function toggleMenu(open) {
      isMenuOpen = open;
      button.setAttribute('aria-expanded', open.toString());
      
      // Toggle icons
      menuOpenIcon?.classList.toggle('hidden', open);
      menuCloseIcon?.classList.toggle('hidden', !open);
      
      // Toggle menu visibility
      menu.classList.toggle('invisible', !open);
      menu.classList.toggle('opacity-0', !open);
      
      // Toggle overlay
      overlay.classList.toggle('opacity-0', !open);
      
      // Toggle content
      if (open) {
        menuContent.classList.remove('-translate-y-8', 'opacity-0');
        document.body.style.overflow = 'hidden';
      } else {
        menuContent.classList.add('-translate-y-8', 'opacity-0');
        document.body.style.overflow = '';
      }
    }

    // Button click handler
    button.addEventListener('click', () => {
      toggleMenu(!isMenuOpen);
    });

    // Close menu when clicking overlay
    overlay.addEventListener('click', () => {
      toggleMenu(false);
    });

    // Close menu on navigation
    const menuLinks = menu.querySelectorAll('a');
    menuLinks.forEach(link => {
      link.addEventListener('click', () => {
        toggleMenu(false);
      });
    });

    // Close menu on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && isMenuOpen) {
        toggleMenu(false);
      }
    });

    // Close menu on resize
    window.addEventListener('resize', () => {
      if (window.innerWidth >= 1024 && isMenuOpen) {
        toggleMenu(false);
      }
    });

    // Initialize closed state
    toggleMenu(false);
  }

  // Setup on initial load
  setupMobileMenu();

  // Setup on view transitions
  document.addEventListener('astro:page-load', setupMobileMenu);
</script>